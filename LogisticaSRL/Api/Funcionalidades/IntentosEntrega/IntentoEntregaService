using System;
using System.Threading.Tasks;
using LogisticaSRL.Persistencia;
using LogisticaSRL.Dominio;
namespace Api.Funcionalidades{
public class IntentoEntregaService
{
    private readonly DbContext _context;

    public IntentoEntregaService(DbContext context)
    {
        _context = context;
    }

    public async Task<IntentoEntregaQueryDto> CreateIntentoEntregaAsync(IntentoEntregaCommandDto intentoDto)
    {
        var intento = new IntentoEntrega
        {
            Id = intentoDto.Id,
            NumeroSeguimiento = intentoDto.NumeroSeguimiento,
            SucursalId = intentoDto.SucursalId,
            NumeroIntento = intentoDto.NumeroIntento,
            Entregado = intentoDto.Entregado,
            FechaIntento = intentoDto.FechaIntento
        };

        _context.IntentosEntrega.Add(intento);
        await _context.SaveChangesAsync();

        return new IntentoEntregaQueryDto
        {
            Id = intento.Id,
            NumeroSeguimiento = intento.NumeroSeguimiento,
            SucursalId = intento.SucursalId,
            NumeroIntento = intento.NumeroIntento,
            Entregado = intento.Entregado,
            FechaIntento = intento.FechaIntento
        };
    }

    public async Task<IntentoEntregaQueryDto> UpdateIntentoEntregaAsync(Guid id, IntentoEntregaCommandDto intentoDto)
    {
        var intento = await _context.IntentosEntrega.FindAsync(id);
        if (intento == null) return null;

        intento.NumeroSeguimiento = intentoDto.NumeroSeguimiento;
        intento.SucursalId = intentoDto.SucursalId;
        intento.NumeroIntento = intentoDto.NumeroIntento;
        intento.Entregado = intentoDto.Entregado;
        intento.FechaIntento = intentoDto.FechaIntento;

        await _context.SaveChangesAsync();

        return new IntentoEntregaQueryDto
        {
            Id = intento.Id,
            NumeroSeguimiento = intento.NumeroSeguimiento,
            SucursalId = intento.SucursalId,
            NumeroIntento = intento.NumeroIntento,
            Entregado = intento.Entregado,
            FechaIntento = intento.FechaIntento
        };
    }

    public async Task<bool> DeleteIntentoEntregaAsync(Guid id)
    {
        var intento = await _context.IntentosEntrega.FindAsync(id);
        if (intento == null) return false;

        _context.IntentosEntrega.Remove(intento);
        await _context.SaveChangesAsync();

        return true;
    }
}
}