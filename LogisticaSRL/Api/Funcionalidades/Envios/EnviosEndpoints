using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using LogisticaSRL.Persistencia;
using LogisticaSRL.Dominio;

namespace Api.Funcionalidades
{
    public class EnviosEndpoints
    {
        private readonly EnviosService _enviosService;

        public EnviosEndpoints(EnviosService enviosService)
        {
            _enviosService = enviosService;
        }

        public async Task<IActionResult> CreateEnvio(HttpContext context)
        {
            var envioDto = await context.Request.ReadFromJsonAsync<EnviosCommandDto>();
            var result = await _enviosService.CreateEnvioAsync(envioDto);
            return new CreatedAtActionResult(nameof(GetEnvioById), "Envios", new { id = result.Id }, result);
        }

        public async Task<IActionResult> UpdateEnvio(HttpContext context, Guid id)
        {
            var envioDto = await context.Request.ReadFromJsonAsync<EnviosCommandDto>();
            var result = await _enviosService.UpdateEnvioAsync(id, envioDto);
            if (result == null) return new NotFoundResult();

            return new OkObjectResult(result);
        }

        public async Task<IActionResult> DeleteEnvio(HttpContext context, Guid id)
        {
            var success = await _enviosService.DeleteEnvioAsync(id);
            if (!success) return new NotFoundResult();

            return new NoContentResult();
        }

        public async Task<IActionResult> GetEnvioById(HttpContext context, Guid id)
        {
            var result = await _enviosService.GetEnvioByIdAsync(id);
            if (result == null) return new NotFoundResult();

            return new OkObjectResult(result);
        }
    }
}